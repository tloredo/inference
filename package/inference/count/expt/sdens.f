        program sdensc---    Write data to plot posterior for Poisson on/off c	signal detection.	integer nmax        parameter (nmax=500)        integer n_on, n_off, i, iter, npts        real*8 t_on, t_off, s, ps, psig, cum, mean, sigma, amean, asig        real*8 slo, shi, ds, c(0:nmax), hpdsig, ginv        real*8 s1, s2, smode, s3, p1, p2, pmax, p3, w, a12, a23        character*40 ofile        common /srange/slo,shi        real*8 slike, slf, cut, sl, sl_scl, ls, error        integer nt, ntmax        call opar(1, 'sdens.pf')        call rdpc('output.file',ofile)        call rdpi('on.counts',n_on)        if (n_on .gt. nmax) pause 'n_on too large!'        call rdpd('on.time',t_on)        call rdpi('off.counts',n_off)        call rdpd('off.time',t_off)        call rdpda('s.range',slo,2)        call rdpi('s.points',npts)        call rdpd('l.cut',cut)        call cpar        ds = (shi-slo)/(npts-1)        p2 = 0.        cum = 0.        amean = 0.        asig = 0.        call setc(n_on, t_on, n_off, t_off, c, nmax)        print *, 'Coefficients calculated...'        s = 0.        ls = sl_scl(n_on, t_on, n_off, t_off)        slf = psig(s, n_on, t_on, c, nmax) /      +        slike(s, n_on, t_on, n_off, t_off, ls, cut, nt)	error = 0.	ntmax = 0c---  Calculate the density at the specified points; keep track of thec---  approximate values of the mode, mean, and sigma.        open(1,file=ofile)        do 20 i=1, npts            s = slo + (i-1)*ds            ps = psig(s, n_on, t_on, c, nmax)            sl = slf*slike(s, n_on, t_on, n_off, t_off, ls, cut, nt)            error = max(error, abs((ps-sl)/ps))            ntmax = max(ntmax,nt)            write(1,10) s, ps, cum, sl, (ps-sl)/ps, sl/slf10          format(6(1pg12.4))            cum = cum + ps*ds            amean = amean + s*ps*ds            asig = asig + s*s*ps*ds            if (ps .gt. p2) then                p2 = ps                s2 = s            endif20      continue	write(*,'(a,i5)')      'Max slike terms used: ',ntmax	write(*,'(a,1pg12.4)') 'Worst slike error:    ',errorc---  Write out the c(i) at the end of the file, and use them toc---  calculate accurate mean and sigma.	asig = sqrt(asig - amean**2)        mean = 0.        sigma = 0.	do 25 i=0, n_on	    mean = mean + c(i)*(i+1.)/t_on	    sigma = sigma + c(i)*(i+2.)*(i+1.)/t_on**2	    write(1,'(a,i5,1(1pg14.6))') 'coeff  ', i, c(i)25	continue	sigma = sqrt(sigma - mean**2)c---  Refine the mode with a gaussian approximation.	write(*,'(a,2(1pg13.5))') 'Rough mode (s,p):   ', s2, p2	if (s2 .gt. 0.) then	    s1 = s2 - sigma/4.	    if (s1 .gt. 0.) then	        s3 = s2  + sigma/4.	    else	        s1 = s2/4.	        s3 = 2.*s2 - s1	    endif	    p1 = psig(s1, n_on, t_on, c, nmax)	    p3 = psig(s3, n_on, t_on, c, nmax)	    w = (s3 - s1)/2.	    a12 = log(p1/p2)	    a23 = log(p2/p3)	    smode = s1 + w*(0.5 + a12/(a12-a23))	    w = sqrt(-w**2/(a12-a23))	    pmax = psig(smode, n_on, t_on, c, nmax)	    write(*,'(a,2(1pg13.5))') 'Refined mode (s,p): ',smode,pmax	    write(*,'(a,2(1pg13.4))') 'Local sigma:  ',w	else	    smode = s2	    pmax = p2	endifc---  Finish off the file with some statistics.        write(*,'(a,2(1pg13.4))') 'Mode is at s= ',smode, pmax        write(*,'(a,2(1pg13.4))') 'Mean is s=    ',mean, amean        write(*,'(a,2(1pg13.4))') 'Sigma is      ',sigma, asig        write(1,'(a,2(1pg13.4))') 'mode.p       ',smode, pmax        write(1,'(a,4(1pg13.4))') 'mean.p.sig.r ',mean,     +        psig(mean, n_on, t_on, c, nmax), sigma, mean/sigmac---  Calculate significance of signal.	if (smode .eq. 0.) then	    close(1)	    stop	endif        call sigsig(n_on, t_on, n_off, t_off, c, nmax, shi, ps, iter)        hpdsig = ginv(0.5d0+ps/2.d0, 1.d0)        if (iter .le. 0) write(*,*) 'sigsig failed!'        write(*,30) iter, ps, hpdsig30      format('iter = ',i5,/,     1      'HPDR size just including s=0: ',1pg13.4,     2      ' = ',1pg13.4,' sigma.')        write(1,'(a,2(1pg13.4))') 'hpd0.sigmas ',ps,hpdsig        close(1)        end