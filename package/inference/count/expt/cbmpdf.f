        program cbmpdfc---    Write data to plot posterior for Poisson on/off c	signal detection.	integer nsmax        parameter (nsmax=500)        integer n_on, n_off, i, npts        real*8 t_on, t_off        real*8 s, ps(nsmax), dps(nsmax), ss, pss, dpss(nsmax)        real*8 norm, cum, amean, asig        real*8 ds, error        real*8 s1, s2, smode, s3, p1, p2, pmax, p3, w, a12, a23        character*40 ofile        real*8 slo, shi        common /srange/slo,shi        real*8 cut, sl_scl, ls        integer nt, ntmaxc+++  Functions:	real*8 sllike        call opar(1, 'cbmpdf.pf')        call rdpc('output.file',ofile)        call rdpi('on.counts',n_on)        call rdpd('on.time',t_on)        call rdpi('off.counts',n_off)        call rdpd('off.time',t_off)        call rdpda('s.range',slo,2)        call rdpi('s.points',npts)        call rdpd('l.cut',cut)        call cparc---  Calculate the density at the specified points; keep track of thec---  approximate value of the mode, and integrate toc---  calculate the norm, mean, and sigma.        p2 = 0.        norm = 0.        amean = 0.        asig = 0.	ntmax = 0        s = 0.        ds = (shi-slo)/(npts-1)        ls = sl_scl(n_on, t_on, n_off, t_off)        do 20 i=1, npts            s = slo + (i-1)*ds            call cbmlike(s, n_on, t_on, n_off, t_off, ls, cut,     *          ps(i), dps(i), nt)c       write(9,'(i4,4(1pg13.5))')i, s, -2*(ps(i)+ls), ps(i), ls	    ps(i) = exp(ps(i))	    dps(i) = ps(i) * dps(i)	    ss = s + 0.01*ds            call cbmlike(ss, n_on, t_on, n_off, t_off, ls, cut,     *          pss, dpss(i), nt)	    pss = exp(pss)	    dpss(i) = (pss - ps(i)) / (ss - s)            error = max(error, abs((dps(i)-dpss(i))/dps(i)))            ntmax = max(ntmax,nt)            if (i .eq. 1 .or. i .eq. npts) then                norm = norm + 0.5*ps(i)*ds            else                norm = norm + ps(i)*ds            endif            amean = amean + s*ps(i)*ds            asig = asig + s*s*ps(i)*ds            if (ps(i) .gt. p2) then                p2 = ps(i)                s2 = s            endif20      continue	write(*,'(a,i5)')      'Max slike terms used: ',ntmax	write(*,'(a,1pg12.4)') 'Worst deriv error:    ',errorc---  Normalize and write out the density.        open(1,file=ofile)        amean = amean / norm        asig = asig / norm	asig = sqrt(asig - amean**2)	p2 = p2 / norm        cum = 0.        do 25 i=1, npts            s = slo + (i-1)*ds            ps(i) = ps(i) / norm            dps(i) = dps(i) / norm            dpss(i) = dpss(i) / norm            write(1,10) s, ps(i), cum, dps(i), dpss(i)            if (i .eq. 1 .or. i .eq. npts) then                cum = cum + 0.5*ps(i)*ds            else                cum = cum + ps(i)*ds            endif25      continue10      format(6(1pg12.4))c---  Refine the mode with a gaussian approximation.	write(*,'(a,2(1pg13.5))') 'Rough mode (s,p):   ', s2, p2	if (s2 .gt. 0.) then	    s1 = s2 - asig/4.	    if (s1 .gt. 0.) then	        s3 = s2  + asig/4.	    else	        s1 = s2/4.	        s3 = 2.*s2 - s1	    endif	    p1 = sllike(s1, n_on, t_on, n_off, t_off, ls, cut, nt)	    p1 = exp(p1) / norm	    p3 = sllike(s3, n_on, t_on, n_off, t_off, ls, cut, nt)	    p3 = exp(p3) / norm	    w = (s3 - s1)/2.	    a12 = log(p1/p2)	    a23 = log(p2/p3)	    smode = s1 + w*(0.5 + a12/(a12-a23))	    w = sqrt(-w**2/(a12-a23))	    pmax = sllike(smode, n_on, t_on, n_off, t_off, ls, cut, nt)	    pmax = exp(pmax)/norm	    write(*,'(a,2(1pg13.5))') 'Refined mode (s,p): ',smode,pmax	    write(*,'(a,2(1pg13.4))') 'Local sigma:  ',w	else	    smode = s2	    pmax = p2	endifc---  Finish off the file with some statistics.        write(*,'(a,2(1pg13.4))') 'Mode is at s= ',smode, pmax        write(*,'(a,2(1pg13.4))') 'Mean is s=    ', amean        write(*,'(a,2(1pg13.4))') 'Sigma is      ',asig        write(1,'(a,2(1pg13.4))') 'mode.p       ',smode, pmax        write(1,'(a,4(1pg13.4))') 'mean.sig.r ',amean,     +        asig, amean/asig        close(1)        end